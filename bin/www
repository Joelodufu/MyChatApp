#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server2:server');
const socketio = require('socket.io')
var http = require('http');
const cors = require('cors')
const socketWare = require('./socket')
const {addUser, removeUser, getUser, getUserInRoom} = require('../models/users')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = socketio(server, {cors:{origin:'*'}})

io.on('connection',(socket)=>{


  socket.on('join', ({name, room}, callback)=>{
    //THIS HANDLES WHAT SHOULD HAPPEN WHEN USER JOINS

   const {error, user}= addUser({id:socket.id, name, room});
   //the error and User object is returned from the helper functions Adduser
   if (error) {
     return callback(error)
   }

   //Welcome Message Emiting
   socket.emit('message',{user: 'admin', text:`${user.name}, Welcome to the room ${user.room}`});

   //tell all users in that room that USER has joined
   socket.broadcast.to(user.room).emit('message', {user: 'admin', text:`${user.name}, has joined!`})

  
   //if no error, join user into the room
   socket.join(user.room);  

   io.to(user.room).emit('roomData', {room:user.room, users:getUserInRoom(user.room)})

   callback();
    
  }) ;


  socket.on('sendMessage', (message, callback)=>{ 

    //get the instance of the user who sends the message. Which is provided by the instance of this socket
    const user = getUser(socket.id);

    //send the messag to the room which the user is in
    io.to(user.room).emit('message', {user: user.name, text:message});
    io.to(user.room).emit('roomData', {room: user.room, users:getUserInRoom(user.room)});


    callback();
  });


  socket.on('disconnect', ()=>{
    const user = removeUser(socket.id)
    if (user) {
      io.to(user.room).emit('message', {user: 'admin', text: `${user.name} has left`})
    }
    console.log(`User had left!!!!!`);
    socket.broadcast.emit('message',  {user: 'admin', text:`someone has left!`})

  })
})
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
